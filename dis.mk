1、托福重构项目，cookie重复写入的问题，使用单例模式的设计思想，将写用户authkey的cookie单独封装，避免cookie重复写入，导致页面加载缓慢。
2、雅思、GRE、托福的laravel重构中，脚本均使用laravel自带的command，并作为规范，命令的命名方式——动词：名字，如import:question，导出某些题目信息，这样使脚本更容易被看懂，依赖laravel的封装，也更容易被维护。
3、雅思首页及模考也的相关数据统计，使用脚本异步处理，避免实时操作带来的风险。
4、GRE重构项目，模考流程的设计，在模考的设计中，大家均参考GMAT，以此寻求规范化，并易于维护，但是各子站都有自己的模考特点，照搬肯定不行，如，GRE会有完整模考及单section模考，并且单section类型不固定，因此GRE模考流程改为按照section进行，每种section使用type标识，每种题目使用type标识，当点击下一道题时，两种type共同作用，来决定下一题的样式及行为。


最有难度的事是项目需求不明确。双G组成员几乎都是新人，对GRE与GMAT的理解不充分。比如GRE错题本功能，可能需求中只写明要做错题本功能，但是错题本功能的每个细节都没有。这时就需要自己去完善这些信息，加入错题本与移除错题本的规则，我的GRE中错题本展示的细节等。我会向产品及测试补充这些细节，项目是项目组的，但也是我们项目组每个成员的，每个人在工作中查漏补缺，我们的团队才会越来越强大，我们的产品才会越来越完美。

一是注释，用户组的四个子站功能类似，因此代码层面有很多可复用的，但是大多数代码并没有注释，导致后期开发时，需要去读每一行。为此，我建议在开发过程中，注释应保航@summary，@param， @return这基本的三个部分，并且类型说清楚，除此之外，复杂的逻辑关键步骤加注释说明。
二是多人开发Git避免冲突。多人开发时，不可避免会同时编辑同一个文件，这时如果没有采取预防措施，百分百会冲突的叫人发疯。开发前一人初始化这个文件，用注释的方式标明各成员的代码块位置，之后各成员pull此分支，最终可避免冲突。

好的方面，各子站相继重构以来，任务较多，GRE的做题流程，模考，移动端做题记录的同步，中断做题记录的同步，均如期完成。在中断练习三端同步的设计中，需使用到更新时间来作为查询条件，但是之前的老流程只记录到练习册的开始时间，由此会造成不同步，在GRE中的结果表均加入了更新字段，来保证客户端同步记录的完整性。
不好的方面，注册门槛的功能开发，设计信息统计表来记录用户的信息统计状态，一是考虑后期的数据统计需求，二是避免查询多个表（目标表，考试记录表），但思维固化在子站，并未从用户组的产品大局出发设计，在今后的开发过程中，会继续提升自己对各个子站的了解，培养自己主人翁意识，能及时参与到各子站的工作中去，并从各个子站的大局设计产品功能的实现方式。